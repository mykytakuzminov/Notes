// MARK: - Enum
// Enum - —ç—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

// MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è
// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ö—Ä–∞–Ω–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
// –ü—Ä–æ—Ç–æ–∫–æ–ª CaseIterable –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
// –°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ String
enum Season: String, CaseIterable {
    case spring = "Springüå∏"
    case summer = "Summerüåû"
    case winter = "Winter‚ùÑÔ∏è"
    case autumn = "AutumnüçÇ"
    
    // MARK: –í—ã—á–µ—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    var color: String {
        switch self {
        case .winter:
            "White"
        case .spring:
            "Green"
        case .summer:
            "Yellow"
        case .autumn:
            "Orange"
        }
    }
    
    // MARK: –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ—Å–ª–µ–Ω–∏—è
    mutating func next() {
        switch self {
        case .spring:
            self = .summer
        case .summer:
            self = .winter
        case .winter:
            self = .autumn
        case .autumn:
            self = .spring
        }
    }
}

// MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
var season: Season = .autumn

// MARK: - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ enum –≤ switch
switch season {
case .spring:
    print("Spring")
case .summer:
    print("Summer")
case .winter:
    print("Winter")
case .autumn:
    print("Autumn")
}
// "Autumn"

// MARK: - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
season.next()
print(season)
// "spring"

// MARK: - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CaseIterable –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
for season in Season.allCases {
    print(season)
}
// "spring"
// "summer"
// "winter"
// "autumn"

// MARK: - –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤—Å–µ–º —Å—ã—Ä—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
for season in Season.allCases {
    print(season.rawValue)
}
// "Springüå∏"
// "Summerüåû"
// "Winter‚ùÑÔ∏è"
// "AutumnüçÇ"

// MARK: - –î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é —á–µ—Ä–µ–∑ —Å—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
let summer = Season(rawValue: "Summerüåû")
print(summer ?? "")
// "summer"

// MARK: - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ if-case
if case .summer = season {
    print("It's summer!")
} else {
    print("It's not summer!")
}
// "It's not summer!"

// MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
for season in Season.allCases {
    print("\(season.rawValue) : \(season.color)")
}
// "Springüå∏ : Green"
// "Summerüåû : Yellow"
// "Winter‚ùÑÔ∏è : White"
// "AutumnüçÇ : Orange"
